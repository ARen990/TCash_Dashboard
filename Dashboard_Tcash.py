import streamlit as st
import pandas as pd
import json
import plotly.express as px

st.set_page_config(page_title="University Course Dashboard", layout="wide")

st.markdown("""
    <style>
    .stApp {
        background-color: #748DAE;   /* ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ß‡πá‡∏ö */
    }
    [data-testid="stSidebar"] {
        background-color: #9ECAD6;   /* ‡∏™‡∏µ Sidebar */
    }
    </style>
""", unsafe_allow_html=True)

# Load data
with open(r"D:\\Y3\\J.bod\data\data_clean.json", "r", encoding="utf-8") as f:
    data = json.load(f)

df = pd.DataFrame(data)
df["‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"] = pd.to_numeric(df["‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"], errors="coerce")
# st.title("üéì University Course Dashboard")

# ---------------------- Create a page select button ----------------------

page = st.sidebar.selectbox(
    "MENU",
    ["Dashboard", "Find Tuition Fees", "Course search table"]
)

# ---------------------- Add a Dashboard page ----------------------
if page == "Dashboard":

    st.title("üìä Dashboard")

    # ----- Summary Card -----
    col1, col2, col3 = st.columns(3)
    col1.metric("Number of universities", df["‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"].nunique())
    col2.metric("Total number of courses", len(df))
    col3.metric("Total average expenses (baht)", f"{df['‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'].mean():,.0f}")

        # --- pie graph and his ---

    # --- pie graph and his ---
    faculty_count = df['‡∏Ñ‡∏ì‡∏∞'].value_counts().head(5)
    col1, col2 = st.columns([1, 2])

    with col1:
        fig = px.histogram(df, x='‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢', nbins=20, 
                            title='Distribution of costs',
                            color_discrete_sequence=["#9ECAD6", "#F5CBCB"],
                            )
        fig.update_layout(
            paper_bgcolor="rgba(0,0,0,0)",
            plot_bgcolor="rgba(0,0,0,0)",
            font=dict(size=16, color="#FFFFFF")
            )   
        st.plotly_chart(fig)

    with col2:
        fig = px.pie(
            values=faculty_count.values,
            names=faculty_count.index,
            title='Figure of faculty numbers (Top 5)',
            color_discrete_sequence=["#9ECAD6", "#F5CBCB"],
            # hole=0.3
        )
        fig.update_layout(
            paper_bgcolor="rgba(0,0,0,0)",
            plot_bgcolor="rgba(0,0,0,0)",
            font=dict(size=16, color="#FFFFFF")
            )  
        st.plotly_chart(fig, use_container_width=True)

    # --- bar top 5 ---
    st.subheader("Top 5 The most expensive and the cheapest")
    cost_mean = df.groupby("‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢")["‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"].mean().dropna()
    top5 = cost_mean.sort_values(ascending=False).head(5)
    low5 = cost_mean.sort_values(ascending=True).head(5)
    combined = pd.concat([top5, low5])

    fig = px.bar(
        combined,
        x=combined.values,
        y=combined.index,
        color=["Most expensive"] * len(top5) + ["Cheapest"] * len(low5),
        orientation="h",
        text_auto=True,
        labels={"x": "Average cost (baht)", "y": "University"},
        color_discrete_sequence=["#9ECAD6", "#F5CBCB"],
    )
    fig.update_layout(
        paper_bgcolor="rgba(0,0,0,0)",
        plot_bgcolor="rgba(0,0,0,0)",
        font=dict(size=16, color="#FFFFFF")
        )   

    st.plotly_chart(fig, use_container_width=True)

    # --- bar top 5 ---
    st.subheader("Top 10 Most university courses")
    uni_count = df["‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"].value_counts().head(10)
    fig1 = px.bar(uni_count, x=uni_count.index, 
                    y=uni_count.values, 
                    labels={"x": "University", "y": "Number of courses"},
                    color_discrete_sequence=["#9ECAD6", "#F5CBCB"],
                    )
    fig1.update_layout(
    paper_bgcolor="rgba(0,0,0,0)",
    plot_bgcolor="rgba(0,0,0,0)",
    font=dict(size=16, color="#FFFFFF")
    )   
    st.plotly_chart(fig1, use_container_width=True)

# ---------------------- Add a Find Tuition Fees  page ----------------------
elif page == "Find Tuition Fees":

    st.title("üîç Find some tuition fees")

    # --- Find close expenses ---
    st.subheader("Find the course with the closest tuition fee")

    input_cost = st.number_input("Enter the number (baht)", min_value=0, step=1000)
    if input_cost > 0:
        df_sorted = df.sort_values("‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢").dropna(subset=["‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"])
        df_sorted["‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å"] = abs(df_sorted["‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"] - input_cost)
        nearest = df_sorted.nsmallest(5, "‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å")

        st.write(f"**5 courses closest to {input_cost:,.0f} baht:**")
        st.table(nearest[["‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢", "‡∏Ñ‡∏ì‡∏∞", "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"]])


# ---------------------- Add a Course search table page ----------------------
elif page == "Course search table":

    st.title("üìã Course search table")

    option_uni = st.multiselect("Select a university", sorted(df["‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"].unique()))
    option_type = st.multiselect("Select course type", sorted(df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£"].dropna().unique()))

    filtered_df = df.copy()

    if option_uni:
        filtered_df = filtered_df[filtered_df["‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"].isin(option_uni)]
    if option_type:
        filtered_df = filtered_df[filtered_df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£"].isin(option_type)]

    # st.dataframe(filtered_df, use_container_width=True)
    
        # Select the columns to sort as desired.
    columns_order = ["‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢", "‡∏Ñ‡∏ì‡∏∞", "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÄ‡∏Ç‡∏ï", "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"]
    df_show = filtered_df[columns_order]

    # Rename the table header (if the current name does not match)
    df_show = df_show.rename(columns={
        "‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢": "University",
        "‡∏Ñ‡∏ì‡∏∞": "Faculty",
        "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÄ‡∏Ç‡∏ï": "Campus",
        "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£": "Course Name",
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£": "Course type",
        "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢": "Tuition Fees"
    })

    # show table
    st.table(df_show)